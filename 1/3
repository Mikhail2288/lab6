import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.Supplier;

public class Main {

   public static <T> T cache(T obj) {
         if (obj == null) {
            return null;
        }

        Class<?> clazz = obj.getClass();
        boolean isInterface = clazz.isInterface();
        Class<?> interfaceOrSuperClass = isInterface ? clazz : clazz.getSuperclass();
          if (interfaceOrSuperClass == null){
              return obj;
          }
        Method[] methods = isInterface ? clazz.getMethods() : interfaceOrSuperClass.getMethods();

        InvocationHandler handler = (proxy, method, args) -> {
             Map<Method, Object> cache = new HashMap<>();
             Map<Method, Object[]> lastState = new HashMap<>();
            if (args != null && args.length > 0) {
                 return method.invoke(obj, args);
             }
            if(isInterface ||  (method.getDeclaringClass() != Object.class && (method.getModifiers() & java.lang.reflect.Modifier.PUBLIC) != 0)) {
                  Supplier<Object[]> stateSupplier = () -> Arrays.stream(obj.getClass().getDeclaredFields())
                          .filter(field -> !java.lang.reflect.Modifier.isStatic(field.getModifiers()))
                          .map(field -> {
                              field.setAccessible(true);
                            try {
                                   return field.get(obj);
                               } catch (IllegalAccessException e) {
                                   return null;
                              }
                           })
                           .filter(Objects::nonNull)
                           .toArray();

                 Object[] currentState = stateSupplier.get();
                if (!cache.containsKey(method) || !Arrays.equals(lastState.get(method), currentState)) {
                       Object result = method.invoke(obj);
                      cache.put(method, result);
                      lastState.put(method, currentState);
                       return result;
                    } else {
                       return cache.get(method);
                   }
             }

                return method.invoke(obj, args);

        };

          T proxy = (T) Proxy.newProxyInstance(
                clazz.getClassLoader(),
                isInterface ? new Class[]{clazz} : clazz.getInterfaces().length == 0 ? new Class[] {clazz}: clazz.getInterfaces(),
                 handler
        );

        return proxy;
    }

    public static void main(String[] args) {
       A a = cache(new A("first"));
        System.out.println(a.cacheTest()); //  Вывод: original method 42
        System.out.println(a.cacheTest()); // Вывод: 42
        a.stringField = "second";
         System.out.println(a.cacheTest()); //  Вывод: original method 42
        System.out.println(a.cacheTest()); // Вывод: 42
    }
}

class A {
    String stringField;

    public A(String str) {
        stringField = str;
    }

    public int cacheTest() {
        System.out.println("original method");
        return 42;
    }
}
